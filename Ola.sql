CREATE DATABASE IF NOT EXISTS OLA;
USE OLA;
ALTER TABLE `OLA BOOKINGS` RENAME TO BOOKINGS;
SELECT * FROM BOOKINGS;

-- RETRIEVE ALL SUCCESSFULL BOOKINGS
SELECT 
    *
FROM
    BOOKINGS
WHERE
    BOOKING_STATUS = 'SUCCESS';

-- FIND THE AVERAGE RIDE DISTANCE FOR EACH VEHICLE TYPE
SELECT 
    VEHICLE_TYPE,
    ROUND(AVG(RIDE_DISTANCE), 2) AS AVG_RIDE_DISTANCE
FROM
    BOOKINGS
GROUP BY VEHICLE_TYPE
ORDER BY 2 DESC;

-- GET THE TOTAL NUMBER OF CANCELED RIDES BY CUSTOMERS
SELECT 
    COUNT(BOOKING_ID) AS `RIDES CANCELED BY CUSTOMERS`
FROM
    BOOKINGS
GROUP BY BOOKING_STATUS
HAVING BOOKING_STATUS = 'CANCELED BY CUSTOMER';

-- LIST THE TOP 5 CUSTOMERS WHO BOOKED THE HIGHEST NUMBER OF RIDES
SELECT 
    CUSTOMER_ID, COUNT(BOOKING_ID) AS RIDES
FROM
    BOOKINGS
GROUP BY CUSTOMER_ID
ORDER BY RIDES DESC
LIMIT 5;

-- GET THE NUMBER OF RIDES CANCELED BY DRIVERS DUE TO PERSONAL AND CAR RELATED ISSUES
SELECT 
    CANCELED_RIDES_BY_DRIVER AS `REASON`,
    COUNT(BOOKING_ID) AS `RIDES CANCELED BY DRIVERS`
FROM
    BOOKINGS
GROUP BY CANCELED_RIDES_BY_DRIVER
HAVING CANCELED_RIDES_BY_DRIVER = 'PERSONAL & CAR RELATED ISSUE';

-- FIND THE MAX AND MIN DRIVER RATINGS FOR PRIME SEDAN BOOKINGS
SELECT 
    VEHICLE_TYPE, MAX(DRIVER_RATINGS), MIN(DRIVER_RATINGS)
FROM
    BOOKINGS
WHERE
    VEHICLE_TYPE = 'PRIME SEDAN';

-- RETRIEVE ALL RIDES WHERE PAYMENT WAS MADE USING UPI
SELECT 
    COUNT(*) AS `TOTAL NUMBER OF UPI PAYMENTS`
FROM
    BOOKINGS
WHERE
    PAYMENT_METHOD = 'UPI';

SELECT * FROM BOOKINGS WHERE PAYMENT_METHOD='UPI';

-- FIND THE AVERAGE CUSTOMER RATING PER VEHICLE TYPE
SELECT 
    VEHICLE_TYPE, ROUND(AVG(CUSTOMER_RATING), 1) AS RATING
FROM
    BOOKINGS
GROUP BY VEHICLE_TYPE;

-- CALCULATE THE TOTAL BOOKING VALUE OF RIDES COMPLETED SUCCESSFULLY
SELECT 
    BOOKING_STATUS, SUM(BOOKING_VALUE) AS `TOTAL BOOKING VALUE`
FROM
    BOOKINGS
GROUP BY BOOKING_STATUS
HAVING BOOKING_STATUS = 'SUCCESS';

-- LIST ALL INCOMPLETE RIDES ALONG WITH THE REASON
SELECT 
    BOOKING_ID,
    BOOKING_STATUS,
    INCOMPLETE_RIDES,
    INCOMPLETE_RIDES_REASON
FROM
    BOOKINGS
WHERE
    INCOMPLETE_RIDES = 'YES';

SELECT COUNT(*) FROM BOOKINGS WHERE INCOMPLETE_RIDES IS NULL;